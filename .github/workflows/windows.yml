name: Windows CUDA Build

on:
  push:
    branches: [ master ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ master ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-2022
    env:
      VCPKG_ROOT: ${{ github.workspace }}\..\vcpkg
      VCPKG_BUILD_TYPE: release

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Install CUDA Toolkit
        uses: Jimver/cuda-toolkit@v0.2.24
        with:
          cuda: '12.8.0'
          use-github-cache: true
          use-local-cache: true

      - name: Setup vcpkg
        run: |
          cd ..
          git clone https://github.com/microsoft/vcpkg.git
          .\vcpkg\bootstrap-vcpkg.bat -disableMetrics
          
          # Reduce parallelism to avoid OOM during dependency builds
          Add-Content -Path "$env:VCPKG_ROOT\triplets\x64-windows.cmake" -Value "set(VCPKG_MAX_CONCURRENCY 2)"

      - name: Cache LibTorch
        id: cache-libtorch
        uses: actions/cache@v4
        with:
          path: external/release/libtorch
          key: libtorch-2.7.0-cu128-${{ runner.os }}

      - name: Download LibTorch 2.7.0 (CUDA 12.8 build)
        if: steps.cache-libtorch.outputs.cache-hit != 'true'
        run: |
          mkdir external\release
          cd ..
          Invoke-WebRequest -Uri https://download.pytorch.org/libtorch/cu128/libtorch-win-shared-with-deps-2.7.0%2Bcu128.zip -OutFile libtorch.zip -Verbose
          Expand-Archive libtorch.zip -DestinationPath $env:GITHUB_WORKSPACE\external\release

      - name: Cache vcpkg binary archives
        uses: actions/cache@v4
        with:
          path: C:\Users\runneradmin\AppData\Local\vcpkg\archives
          key: vcpkg-binary-archives-${{ runner.os }}-${{ hashFiles('**/vcpkg.json') }}
          restore-keys: |
            vcpkg-binary-archives-${{ runner.os }}-

      - name: Configure with CMake
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          cmake -S . -B build ^
            -DCMAKE_BUILD_TYPE=Release ^
            -G Ninja ^
            -DCMAKE_MAKE_PROGRAM=ninja

      - name: Build
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          cmake --build build --config Release --parallel %NUMBER_OF_PROCESSORS%

      - name: Copy runtime assets
        shell: pwsh
        run: |
          Copy-Item -Path parameter -Destination build\parameter -Recurse -Force

      - name: Upload build artifacts
        if: ${{ success() }}
        uses: actions/upload-artifact@v5
        with:
          name: lichtfeld-studio-windows-${{ github.run_number }}
          path: build
          if-no-files-found: error
