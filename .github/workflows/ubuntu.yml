name: Ubuntu CUDA Build

on:
  push:
    branches: [ master ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ master ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:

jobs:
  build-ubuntu:
    runs-on: ubuntu-24.04
    env:
      VCPKG_ROOT: ${{ github.workspace }}/../vcpkg
      CC: gcc-14
      CXX: g++-14
      VCPKG_BUILD_TYPE: release

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Install CUDA Toolkit 12.8
        id: cuda
        uses: Jimver/cuda-toolkit@v0.2.24
        with:
          cuda: "12.8.0"
          components: '["nvcc"]'

      - name: Install GCC 14 and dependencies
        run: |
          sudo apt-get update

          # install cmake from https://apt.kitware.com to get cmake 3.30+

          sudo apt-get install -y ca-certificates gnupg wget

          if [ ! -f /usr/share/doc/kitware-archive-keyring/copyright ]; then
            wget -qO- https://apt.kitware.com/keys/kitware-archive-latest.asc | gpg --dearmor | sudo tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null
          fi

          echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ noble main' | sudo tee /etc/apt/sources.list.d/kitware.list >/dev/null
          sudo apt-get update

          if [ ! -f /usr/share/doc/kitware-archive-keyring/copyright ]; then
            sudo rm /usr/share/keyrings/kitware-archive-keyring.gpg
          fi

          sudo apt-get install -y kitware-archive-keyring

          sudo apt-get install -y git curl unzip cmake gcc-14 g++-14 ccache ninja-build
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-14 100 \
                                   --slave /usr/bin/g++ g++ /usr/bin/g++-14

      - name: Setup vcpkg
        run: |
          sudo apt-get update
          sudo apt-get install -y zip tar pkg-config python3 python3-dev libxinerama-dev libxcursor-dev xorg-dev libglu1-mesa-dev
          cd ..
          git clone https://github.com/microsoft/vcpkg.git
          ./vcpkg/bootstrap-vcpkg.sh -disableMetrics

          # Configure vcpkg to only build release and reduce parallelism
          cat >> $VCPKG_ROOT/triplets/x64-linux.cmake << EOF
          set(VCPKG_BUILD_TYPE release)
          set(VCPKG_MAX_CONCURRENCY 2)
          EOF

          cat $VCPKG_ROOT/triplets/x64-linux.cmake

      - name: Cache LibTorch
        id: cache-libtorch
        uses: actions/cache@v4
        with:
          path: external/libtorch
          key: libtorch-2.7.0-cu128-${{ runner.os }}

      - name: Download LibTorch 2.7.0 (CUDA 12.8 build)
        if: steps.cache-libtorch.outputs.cache-hit != 'true'
        run: |
          mkdir -p external
          cd ..
          curl -L https://download.pytorch.org/libtorch/cu128/libtorch-cxx11-abi-shared-with-deps-2.7.0%2Bcu128.zip -o libtorch.zip
          unzip libtorch.zip -d $GITHUB_WORKSPACE/external

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ~/.cache/ccache
          key: ccache-${{ runner.os }}-${{ github.run_id }}
          restore-keys: |
            ccache-${{ runner.os }}-

      - name: Cache vcpkg binary archives
        uses: actions/cache@v4
        with:
          path: ~/.cache/vcpkg/archives
          key: vcpkg-binary-archives-${{ runner.os }}-${{ hashFiles('**/vcpkg.json') }}
          restore-keys: |
            vcpkg-binary-archives-${{ runner.os }}-

      - name: Configure with CMake
        run: |
          cmake -S . -B build \
            -DCMAKE_BUILD_TYPE=Release \
            -G Ninja \
            -DCMAKE_MAKE_PROGRAM=/usr/bin/ninja \
            -DCMAKE_CUDA_COMPILER=${{ steps.cuda.outputs.cuda-path }}/bin/nvcc

      - name: Build
        run: cmake --build build --config Release --parallel $(nproc)

      - name: Upload build artifacts
        if: ${{ success() }}
        uses: actions/upload-artifact@v4
        with:
          name: lichtfeld-studio-ubuntu-${{ github.run_number }}
          path: |
            build/LichtFeld-Studio*
          if-no-files-found: error
